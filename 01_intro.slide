# Intro to Go

Maximilian Wurzer
Advisory IT Architect, IBM Deutschland

## Basic facts about Go

- is a statically typed, garbage collected, compiled programming language
- developed by Google (Rob Pike, Ken Thompson, Robert Griesemer)
- 1.0 released in March 2012
  - guarantees compatibility 
- Stack Overflow (most wanted): 3 (2020)

Famous software in Go:
- Docker, Kubernetes (OpenShift, IKS, etc.)
- InfluxDB, TiDB, CockroachDB
- Mattermost, Terraform, Hugo

## Hello World

.play presentation_code/helloWorld.go

## Hello Microservice-World

.code presentation_code/helloHttp.go

## Why should Go interest me?

## Why was Go developed? (1/2)

- Moore's law is ending

//.image images/moores_law.jpg _ 500

- Demand for performant software is increasing

## Why was Go developed? (2/2)

Let's take a look at Google:
- huge network loads
- one mono-repository
- a few supported languages: (C/C++, Java, Python, JavaScript)

What they needed:
- statically typed and run-time efficient as C
- readability and usability as Python and JavaScript
- high-performance networking and multiprocessing


## History

- started 2007
- publicly announced 2009
- 1.0 released in March 2011

Important Steps in development (over the last 10 years):
- Code Coverage support in `go test`
- Module support: integrated support for versioning and package distribution

Next big thing:
- Generics in Go (RFC approved few days ago)

## Features

- integrated test framework
- great standard library
  - Networking (TCP,UDP,HTTP,SMTP)
  - Database (SQL)
  - Time, Image, Encoding, Crypto, Compression, etc.
- supports open source development
  - huge ecosystem of libraries

## Use cases

## Frontend vs. Backend

- Go is almost never run by end-users
- Go is used for web backends, infrastructure (i.e. Kubernetes)
- Go is a great choice for developer tools
- Go is also useful as a scripting language

## Scripting and Tools

- Code can be run as a script: `go run file.go`
- Binaries bundle all dependencies
- Binaries are nearly static by default
- Startup time is short

## Cross-Compilation

- Go compiler needs a single flag to build for other platforms
  - `GOOS=darwin go build file.go` builds binaries for Mac, without requiring a Mac
- Other architectures are also possible
  - `GOOS=linux GOARCH=arm go build file.go` builds an ARM binary
- A single CI process can build a binary for all platforms and architectures
- Resulting binary is very portable
  - On Linux, binary will only depend on glibc
