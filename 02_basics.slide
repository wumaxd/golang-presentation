# Basics

Maximilian Wurzer
Advisory IT Architect, IBM Deutschland

## Types and data structures

## Typing

- Go is _statically typed_.
- Basic Data Types
    - Numbers
        - Integers (signed: `int8`, unsigned: `uint8`)

            ```
            var myIntVar int = 23
            ```
        - Floating-Point Numbers

            ```
            var myFloatVar float64 = 3.14
            ```
    - Strings

        ```
        var myString string = "Hello World"
        ```
    - Booleans
        ```
        var myBool bool = true
        ```
- Shorthand for declaring and initializing a variable
  ```
  myNewBool := true
  ```

## Typing Examples

.play presentation_code/basicsTypes.go

## Arrays, Slices and Maps

- _Array_ - numbered sequence of elements of a specific length
  ```
  b := [5]int{1, 2, 3, 4, 5}
  ```
- _Slice_ - segment of an array, but the length is allowed to change
  ```
  s := make([]string, 3)
  ```
- _Map_ - unordered collection of key-value pairs
  ```
  m := make(map[string]int)
  ```

## Arrays, Slices and Maps

.play presentation_code/basicsASM.go

Take a look at **[Slice Tricks](https://github.com/golang/go/wiki/SliceTricks)**

## Pointers

- _Pointers_ allow you to pass references to values and records within your program

.play presentation_code/basicsPointer.go

## Structs and Interfaces

- Struct is a type that contains named fields
  - User-defined data type
- Interface is a type that defines a method set
  - Method set: list of methods a type must have in order to implement the interface

## Struct Example

.play presentation_code/basicsStruct.go

## Interface Example

.play presentation_code/basicsInterface.go

## Visibility

There is no **`public`**, **`protected`** or **`private`** keyword.

Go does this by **Naming**-Conventions! 

This applies to: *Functions / Methods*, *Structs*, *Interfaces*

Rules:
- upper case first letter of the name: **Public**
  - `func MyPublicFunction() {}`
  - `type PublicStruct ...`
- lower case first letter of the name: **Private**
  - `func myPrivateFunction() {}`
  - `type privateStruct ...`

## Control structures

## if ... else if ... else

- No parentheses around condition
- local assignment possible: `if a := 5; 3 < a {}`

.play presentation_code/basicsIfElse.go

## switch ... case

- No `break` after cases needed.

.play -edit presentation_code/basicsSwitchCase.go

## Loops

- Only one loop in Go, but supports multiple types of loops

.play -edit presentation_code/basicsFor.go



## Concurrency

## Concurrency - Goroutines
Functions which are executed concurrent are called `goroutine`. These are defined as following ([proc.go](https://golang.org/src/runtime/proc.go)):

```
The main concepts are:
G - goroutine.
M - worker thread, or machine.
P - processor, a resource that is required to execute Go code.
    M must have an associated P to execute Go code, however it can be
    blocked or in a syscall w/o an associated P.
```

A `goroutine` is assigned to a Thread which is assigned to a physical CPU.

## Concurrency - Goroutines Example

.play presentation_code/basicsGoroutine.go

## Concurrency - Channels

`Channels` provide a way for two `goroutines` to communicate with each other and synchronize their execution.

## Concurrency - Channels Example

.play presentation_code/basicsChannels.go

## Concurrency - Channels Direction & Buffer

- Channels can be directed - only send or only receive
- Channels are by default _unbuffered_ - only accept sends `(chan <-)` if there is a corresponding receive `(<- chan)` ready

.play presentation_code/basicsBuffer.go

## Select

Waiting for a channel to receive a message:

.play presentation_code/basicsSelect.go




## Error handling

A simple built-in interface to implement for custom *Error*-Types:

.code presentation_code/error.go

Error Handling: 
- Makes use of *multiple assignment* and *multiple return values*
- **Convention**: The error argument is always the last


## Error handling

.play -numbers presentation_code/basicsErrorHandling.go

## Garbage Collection

- The runtime library implements garbage collection, concurrency, stack management, and other critical features of the Go language.
- Via `GOGC` the garbage collector can be controlled (total heap size relative to reachable objects).
- There is no separate virtual machine.

## Compilation - Under the hood

.link https://github.com/golang/go/tree/master/src/cmd/compile


Go programs are compiled ahead of time to native machine code

1. Parsing
2. Type-checking and AST transformations
3. Generic SSA (Static Single Assignment)
4. Generating machine code

## Compilation - Choose your target

**One source - Many targets**
- `GOOS=linux` - `GOARCH=arm`
- `GOOS=linux` - `GOARCH=amd64`
- `GOOS=linux` - `GOARCH=ppc64le`
- `GOOS=windows` - `GOARCH=amd64`
- `GOOS=darwin` - `GOARCH=amd64`

*Go is statically compiled down to its targetâ€™s native machine and mostly outperforms its virtualized (e.g. Java, Kotlin) and interpreted (e.g. JavaScript) counterparts.*

## Formatting

- `gofmt` is an auto-formatter
- Formatted code is
  - easier to **write**
  - easier to **read**
  - easier to **maintain**
  - **uncontroversial**

## Go by Example

.link https://gobyexample.com
.image images/gobyexample.png
